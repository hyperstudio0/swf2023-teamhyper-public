/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AntiPhishingSwf2023Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToBlackList"
      | "addToWhiteList"
      | "isBlackListed"
      | "isWhiteListed"
      | "removeFromBlackList"
      | "removeFromWhiteList"
      | "updateBlackList"
      | "updateWhiteList"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToBlackList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlackListed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhiteListed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromBlackList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhiteList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlackList",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhiteList",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addToBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlackListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhiteListed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhiteList",
    data: BytesLike
  ): Result;
}

export interface AntiPhishingSwf2023 extends BaseContract {
  connect(runner?: ContractRunner | null): AntiPhishingSwf2023;
  waitForDeployment(): Promise<this>;

  interface: AntiPhishingSwf2023Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToBlackList: TypedContractMethod<
    [_id: string, _reason: BigNumberish],
    [void],
    "nonpayable"
  >;

  addToWhiteList: TypedContractMethod<[_did: string], [void], "nonpayable">;

  isBlackListed: TypedContractMethod<
    [_id: string],
    [[boolean, bigint]],
    "view"
  >;

  isWhiteListed: TypedContractMethod<[_did: string], [boolean], "view">;

  removeFromBlackList: TypedContractMethod<[_id: string], [void], "nonpayable">;

  removeFromWhiteList: TypedContractMethod<
    [_did: string],
    [void],
    "nonpayable"
  >;

  updateBlackList: TypedContractMethod<
    [_oldId: string, _newId: string, _newReason: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWhiteList: TypedContractMethod<
    [_oldDid: string, _newDid: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToBlackList"
  ): TypedContractMethod<
    [_id: string, _reason: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToWhiteList"
  ): TypedContractMethod<[_did: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isBlackListed"
  ): TypedContractMethod<[_id: string], [[boolean, bigint]], "view">;
  getFunction(
    nameOrSignature: "isWhiteListed"
  ): TypedContractMethod<[_did: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeFromBlackList"
  ): TypedContractMethod<[_id: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFromWhiteList"
  ): TypedContractMethod<[_did: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBlackList"
  ): TypedContractMethod<
    [_oldId: string, _newId: string, _newReason: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWhiteList"
  ): TypedContractMethod<
    [_oldDid: string, _newDid: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
